[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 exemplar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Neuzerling. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neuzerling D (2022). exemplar: Generate Validation Functions Make Sure One Object Looks Like Another. R package version 0.0.0.9001, https://github.com/mdneuzerling/exemplar.","code":"@Manual{,   title = {exemplar: Generate Validation Functions to Make Sure One Object Looks Like Another},   author = {David Neuzerling},   year = {2022},   note = {R package version 0.0.0.9001},   url = {https://github.com/mdneuzerling/exemplar}, }"},{"path":"/index.html","id":"exemplar","dir":"","previous_headings":"","what":"Generate Validation Functions to Make Sure One Object Looks Like Another","title":"Generate Validation Functions to Make Sure One Object Looks Like Another","text":"Exemplar generates dependency-free validation functions make sure one object looks like another (exemplar). package contains one function, exemplar. Consider validation function generated using mtcars$wt (vehicle weight, 1000 lbs) exemplar: print function can modified used make sure new data meets conditions mtcars$wt: generated validation function, validate_mtcars_wt checks : input double missing values values positive conditions met, function invisibly return TRUE. Otherwise, error. function can defined eval parse: checks commented . exemplar meet criteria (eg. duplicate values) checks specific used default (range checks). intention users modify validation functions meet needs placing pipelines scripts. common use case might machine learning train/test data split. validation function can generated using training data exemplar, applied test data. Entire data frames can used exemplars. Additionally, exemplar supports tidyselect selectors, limits validation functions certain columns. following work: functions produced exemplar require least R 3.5 (due improvements made stopifnot) otherwise requires dependencies. , exemplar generates functions need exemplar packages run.","code":"exemplar(mtcars$wt) validate_mtcars_wt <- function(data) {   stopifnot(exprs = {     is.double(data)     !any(is.na(data) | is.null(data))     # Duplicate values were detected so this assertion has been disabled:     # !any(duplicated(data))     min(data, na.rm = TRUE) > 0 # all positive     # Uncomment or modify the below range assertions if needed:     # max(data, na.rm = TRUE) <= 5.424     # 1.513 <= min(data, na.rm = TRUE)     # Uncomment or modify the below deviance from mean assertions if needed.     # The mean is 3.22 and the standard deviation is 0.98:     # max(data, na.rm = TRUE) <= 3.22 + 4 * 0.98     # 3.22 - 4 * 0.98 <= min(data, na.rm = TRUE)   })   invisible(TRUE) } eval(parse(text = exemplar(mtcars$wt))) validate_mtcars_wt(c(mtcars$wt, NA)) Error in validate_mtcars_wt(c(mtcars$wt, NA)) :    !any(is.na(data) | is.null(data)) is not TRUE exemplar(mtcars) # will validate all columns exemplar(mtcars, wt, mpg) exemplar(mtcars, -cyl) exemplar(mtcars, starts_with(\"d\"))"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Validation Functions to Make Sure One Object Looks Like Another","text":"can install development version exemplar GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mdneuzerling/exemplar\")"},{"path":"/reference/assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate character vector of assertions for a given object — assertions","title":"Generate character vector of assertions for a given object — assertions","text":"Generate character vector assertions given object","code":""},{"path":"/reference/assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate character vector of assertions for a given object — assertions","text":"","code":"assertions(x, data_name, ...)"},{"path":"/reference/assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate character vector of assertions for a given object — assertions","text":"x object generate assertions. data_name Name data object validate, called interior function. defaults \"data\", may make sense use names individual assertions, eg. \"data$column\". ... Arguments passed class-specific functions.","code":""},{"path":"/reference/exemplar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a validation function from an exemplar — exemplar","title":"Create a validation function from an exemplar — exemplar","text":"function print validation function can used make sure new object looks like input (exemplar). checks commented . exemplar meet criteria (eg. duplicate values) checks specific used default (range checks). intention users modify validation functions meet needs placing pipelines scripts. functions produced exemplar require least R 3.5 (due improvements made \\link{stopifnot} otherwise requires dependencies. , exemplar generates functions need exemplar packages run.","code":""},{"path":"/reference/exemplar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a validation function from an exemplar — exemplar","text":"","code":"exemplar(   x,   ...,   .function_suffix = NULL,   .enable_range_assertions = FALSE,   .enable_deviance_assertions = FALSE,   .allowed_deviance = 4 )"},{"path":"/reference/exemplar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a validation function from an exemplar — exemplar","text":"x object use exemplar validation function. ... Additional arguments used building assertions. Currently used apply validation certain columns data frame. uses tidyselect functions. Refer dplyr package information. .function_suffix default generated function named input, eg. exemplar(mtcars) generate function named validate_mtcars. parameter allows overriding suffix, eg. exemplar(mtcars, .function_suffix = \"my_data\") generate function named validate_my_data. .enable_range_assertions Assertions numeric columns/vectors include range assertions, ensure new data within range exemplar. assertions commented default, unless argument parameter TRUE. .enable_deviance_assertions Assertions numeric columns/vectors include deviance assertions, ensure new data within number standard deviations mean exemplar, configured .allowed_deviance. assertions commented default, unless argument parameter TRUE. .allowed_deviance Configures number standard deviations mean new data allowed . deviance assertions commented default unless .enable_deviance_assertions set TRUE. .allowed_deviance defaults 4, new data within 4 standard deviations mean based statistical properties exemplar.","code":""},{"path":"/reference/exemplar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a validation function from an exemplar — exemplar","text":"","code":"exemplar(mtcars) #> validate_mtcars <- function(data) { #>   stopifnot(exprs = { #>     is.data.frame(data) #>     identical(colnames(data), c(\"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\")) #>  #>     \"mpg\" %in% colnames(data) #>     is.double(data[[\"mpg\"]]) #>     !any(is.na(data[[\"mpg\"]]) | is.null(data[[\"mpg\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"mpg\"]])) #>     min(data[[\"mpg\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 33.9 #>     # 10.4 <= min(data[[\"mpg\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 20.09 and the standard deviation is 6.03: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 20.09 + 4 * 6.03 #>     # 20.09 - 4 * 6.03 <= max(data[[\"mpg\"]], na.rm = TRUE) #>  #>     \"cyl\" %in% colnames(data) #>     is.double(data[[\"cyl\"]]) #>     !any(is.na(data[[\"cyl\"]]) | is.null(data[[\"cyl\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"cyl\"]])) #>     min(data[[\"cyl\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"cyl\"]], na.rm = TRUE) <= 8 #>     # 4 <= min(data[[\"cyl\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 6.19 and the standard deviation is 1.79: #>     # max(data[[\"cyl\"]], na.rm = TRUE) <= 6.19 + 4 * 1.79 #>     # 6.19 - 4 * 1.79 <= max(data[[\"cyl\"]], na.rm = TRUE) #>  #>     \"disp\" %in% colnames(data) #>     is.double(data[[\"disp\"]]) #>     !any(is.na(data[[\"disp\"]]) | is.null(data[[\"disp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"disp\"]])) #>     min(data[[\"disp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 472 #>     # 71.1 <= min(data[[\"disp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 230.72 and the standard deviation is 123.94: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 230.72 + 4 * 123.94 #>     # 230.72 - 4 * 123.94 <= max(data[[\"disp\"]], na.rm = TRUE) #>  #>     \"hp\" %in% colnames(data) #>     is.double(data[[\"hp\"]]) #>     !any(is.na(data[[\"hp\"]]) | is.null(data[[\"hp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"hp\"]])) #>     min(data[[\"hp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 335 #>     # 52 <= min(data[[\"hp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 146.69 and the standard deviation is 68.56: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 146.69 + 4 * 68.56 #>     # 146.69 - 4 * 68.56 <= max(data[[\"hp\"]], na.rm = TRUE) #>  #>     \"drat\" %in% colnames(data) #>     is.double(data[[\"drat\"]]) #>     !any(is.na(data[[\"drat\"]]) | is.null(data[[\"drat\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"drat\"]])) #>     min(data[[\"drat\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 4.93 #>     # 2.76 <= min(data[[\"drat\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.6 and the standard deviation is 0.53: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 3.6 + 4 * 0.53 #>     # 3.6 - 4 * 0.53 <= max(data[[\"drat\"]], na.rm = TRUE) #>  #>     \"wt\" %in% colnames(data) #>     is.double(data[[\"wt\"]]) #>     !any(is.na(data[[\"wt\"]]) | is.null(data[[\"wt\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"wt\"]])) #>     min(data[[\"wt\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 5.424 #>     # 1.513 <= min(data[[\"wt\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.22 and the standard deviation is 0.98: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 3.22 + 4 * 0.98 #>     # 3.22 - 4 * 0.98 <= max(data[[\"wt\"]], na.rm = TRUE) #>  #>     \"qsec\" %in% colnames(data) #>     is.double(data[[\"qsec\"]]) #>     !any(is.na(data[[\"qsec\"]]) | is.null(data[[\"qsec\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"qsec\"]])) #>     min(data[[\"qsec\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 22.9 #>     # 14.5 <= min(data[[\"qsec\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 17.85 and the standard deviation is 1.79: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 17.85 + 4 * 1.79 #>     # 17.85 - 4 * 1.79 <= max(data[[\"qsec\"]], na.rm = TRUE) #>  #>     \"vs\" %in% colnames(data) #>     is.double(data[[\"vs\"]]) #>     !any(is.na(data[[\"vs\"]]) | is.null(data[[\"vs\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"vs\"]])) #>     min(data[[\"vs\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"vs\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.44 and the standard deviation is 0.5: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 0.44 + 4 * 0.5 #>     # 0.44 - 4 * 0.5 <= max(data[[\"vs\"]], na.rm = TRUE) #>  #>     \"am\" %in% colnames(data) #>     is.double(data[[\"am\"]]) #>     !any(is.na(data[[\"am\"]]) | is.null(data[[\"am\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"am\"]])) #>     min(data[[\"am\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"am\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.41 and the standard deviation is 0.5: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 0.41 + 4 * 0.5 #>     # 0.41 - 4 * 0.5 <= max(data[[\"am\"]], na.rm = TRUE) #>  #>     \"gear\" %in% colnames(data) #>     is.double(data[[\"gear\"]]) #>     !any(is.na(data[[\"gear\"]]) | is.null(data[[\"gear\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"gear\"]])) #>     min(data[[\"gear\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 5 #>     # 3 <= min(data[[\"gear\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.69 and the standard deviation is 0.74: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 3.69 + 4 * 0.74 #>     # 3.69 - 4 * 0.74 <= max(data[[\"gear\"]], na.rm = TRUE) #>  #>     \"carb\" %in% colnames(data) #>     is.double(data[[\"carb\"]]) #>     !any(is.na(data[[\"carb\"]]) | is.null(data[[\"carb\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"carb\"]])) #>     min(data[[\"carb\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 8 #>     # 1 <= min(data[[\"carb\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 2.81 and the standard deviation is 1.62: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 2.81 + 4 * 1.62 #>     # 2.81 - 4 * 1.62 <= max(data[[\"carb\"]], na.rm = TRUE) #>   }) #>   invisible(TRUE) #> } exemplar(mtcars$gear) #> validate_mtcars_gear <- function(data) { #>   stopifnot(exprs = { #>     is.double(data) #>     !any(is.na(data) | is.null(data)) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data)) #>     min(data, na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data, na.rm = TRUE) <= 5 #>     # 3 <= min(data, na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.69 and the standard deviation is 0.74: #>     # max(data, na.rm = TRUE) <= 3.69 + 4 * 0.74 #>     # 3.69 - 4 * 0.74 <= max(data, na.rm = TRUE) #>   }) #>   invisible(TRUE) #> } exemplar(mtcars, -cyl) #> validate_mtcars <- function(data) { #>   stopifnot(exprs = { #>     is.data.frame(data) #>     # The data is potentially being subsetted so this assertion has been disabled: #>     # identical(colnames(data), c(\"mpg\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\")) #>  #>     \"mpg\" %in% colnames(data) #>     is.double(data[[\"mpg\"]]) #>     !any(is.na(data[[\"mpg\"]]) | is.null(data[[\"mpg\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"mpg\"]])) #>     min(data[[\"mpg\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 33.9 #>     # 10.4 <= min(data[[\"mpg\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 20.09 and the standard deviation is 6.03: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 20.09 + 4 * 6.03 #>     # 20.09 - 4 * 6.03 <= max(data[[\"mpg\"]], na.rm = TRUE) #>  #>     \"disp\" %in% colnames(data) #>     is.double(data[[\"disp\"]]) #>     !any(is.na(data[[\"disp\"]]) | is.null(data[[\"disp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"disp\"]])) #>     min(data[[\"disp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 472 #>     # 71.1 <= min(data[[\"disp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 230.72 and the standard deviation is 123.94: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 230.72 + 4 * 123.94 #>     # 230.72 - 4 * 123.94 <= max(data[[\"disp\"]], na.rm = TRUE) #>  #>     \"hp\" %in% colnames(data) #>     is.double(data[[\"hp\"]]) #>     !any(is.na(data[[\"hp\"]]) | is.null(data[[\"hp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"hp\"]])) #>     min(data[[\"hp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 335 #>     # 52 <= min(data[[\"hp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 146.69 and the standard deviation is 68.56: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 146.69 + 4 * 68.56 #>     # 146.69 - 4 * 68.56 <= max(data[[\"hp\"]], na.rm = TRUE) #>  #>     \"drat\" %in% colnames(data) #>     is.double(data[[\"drat\"]]) #>     !any(is.na(data[[\"drat\"]]) | is.null(data[[\"drat\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"drat\"]])) #>     min(data[[\"drat\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 4.93 #>     # 2.76 <= min(data[[\"drat\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.6 and the standard deviation is 0.53: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 3.6 + 4 * 0.53 #>     # 3.6 - 4 * 0.53 <= max(data[[\"drat\"]], na.rm = TRUE) #>  #>     \"wt\" %in% colnames(data) #>     is.double(data[[\"wt\"]]) #>     !any(is.na(data[[\"wt\"]]) | is.null(data[[\"wt\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"wt\"]])) #>     min(data[[\"wt\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 5.424 #>     # 1.513 <= min(data[[\"wt\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.22 and the standard deviation is 0.98: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 3.22 + 4 * 0.98 #>     # 3.22 - 4 * 0.98 <= max(data[[\"wt\"]], na.rm = TRUE) #>  #>     \"qsec\" %in% colnames(data) #>     is.double(data[[\"qsec\"]]) #>     !any(is.na(data[[\"qsec\"]]) | is.null(data[[\"qsec\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"qsec\"]])) #>     min(data[[\"qsec\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 22.9 #>     # 14.5 <= min(data[[\"qsec\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 17.85 and the standard deviation is 1.79: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 17.85 + 4 * 1.79 #>     # 17.85 - 4 * 1.79 <= max(data[[\"qsec\"]], na.rm = TRUE) #>  #>     \"vs\" %in% colnames(data) #>     is.double(data[[\"vs\"]]) #>     !any(is.na(data[[\"vs\"]]) | is.null(data[[\"vs\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"vs\"]])) #>     min(data[[\"vs\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"vs\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.44 and the standard deviation is 0.5: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 0.44 + 4 * 0.5 #>     # 0.44 - 4 * 0.5 <= max(data[[\"vs\"]], na.rm = TRUE) #>  #>     \"am\" %in% colnames(data) #>     is.double(data[[\"am\"]]) #>     !any(is.na(data[[\"am\"]]) | is.null(data[[\"am\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"am\"]])) #>     min(data[[\"am\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"am\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.41 and the standard deviation is 0.5: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 0.41 + 4 * 0.5 #>     # 0.41 - 4 * 0.5 <= max(data[[\"am\"]], na.rm = TRUE) #>  #>     \"gear\" %in% colnames(data) #>     is.double(data[[\"gear\"]]) #>     !any(is.na(data[[\"gear\"]]) | is.null(data[[\"gear\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"gear\"]])) #>     min(data[[\"gear\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 5 #>     # 3 <= min(data[[\"gear\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.69 and the standard deviation is 0.74: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 3.69 + 4 * 0.74 #>     # 3.69 - 4 * 0.74 <= max(data[[\"gear\"]], na.rm = TRUE) #>  #>     \"carb\" %in% colnames(data) #>     is.double(data[[\"carb\"]]) #>     !any(is.na(data[[\"carb\"]]) | is.null(data[[\"carb\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"carb\"]])) #>     min(data[[\"carb\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 8 #>     # 1 <= min(data[[\"carb\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 2.81 and the standard deviation is 1.62: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 2.81 + 4 * 1.62 #>     # 2.81 - 4 * 1.62 <= max(data[[\"carb\"]], na.rm = TRUE) #>   }) #>   invisible(TRUE) #> } exemplar(mtcars, starts_with(\"d\")) #> validate_mtcars <- function(data) { #>   stopifnot(exprs = { #>     is.data.frame(data) #>     # The data is potentially being subsetted so this assertion has been disabled: #>     # identical(colnames(data), c(\"disp\", \"drat\")) #>  #>     \"disp\" %in% colnames(data) #>     is.double(data[[\"disp\"]]) #>     !any(is.na(data[[\"disp\"]]) | is.null(data[[\"disp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"disp\"]])) #>     min(data[[\"disp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 472 #>     # 71.1 <= min(data[[\"disp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 230.72 and the standard deviation is 123.94: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 230.72 + 4 * 123.94 #>     # 230.72 - 4 * 123.94 <= max(data[[\"disp\"]], na.rm = TRUE) #>  #>     \"drat\" %in% colnames(data) #>     is.double(data[[\"drat\"]]) #>     !any(is.na(data[[\"drat\"]]) | is.null(data[[\"drat\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"drat\"]])) #>     min(data[[\"drat\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 4.93 #>     # 2.76 <= min(data[[\"drat\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.6 and the standard deviation is 0.53: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 3.6 + 4 * 0.53 #>     # 3.6 - 4 * 0.53 <= max(data[[\"drat\"]], na.rm = TRUE) #>   }) #>   invisible(TRUE) #> } exemplar(mtcars, .function_suffix = \"my_data\") #> validate_my_data <- function(data) { #>   stopifnot(exprs = { #>     is.data.frame(data) #>     identical(colnames(data), c(\"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\")) #>  #>     \"mpg\" %in% colnames(data) #>     is.double(data[[\"mpg\"]]) #>     !any(is.na(data[[\"mpg\"]]) | is.null(data[[\"mpg\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"mpg\"]])) #>     min(data[[\"mpg\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 33.9 #>     # 10.4 <= min(data[[\"mpg\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 20.09 and the standard deviation is 6.03: #>     # max(data[[\"mpg\"]], na.rm = TRUE) <= 20.09 + 4 * 6.03 #>     # 20.09 - 4 * 6.03 <= max(data[[\"mpg\"]], na.rm = TRUE) #>  #>     \"cyl\" %in% colnames(data) #>     is.double(data[[\"cyl\"]]) #>     !any(is.na(data[[\"cyl\"]]) | is.null(data[[\"cyl\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"cyl\"]])) #>     min(data[[\"cyl\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"cyl\"]], na.rm = TRUE) <= 8 #>     # 4 <= min(data[[\"cyl\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 6.19 and the standard deviation is 1.79: #>     # max(data[[\"cyl\"]], na.rm = TRUE) <= 6.19 + 4 * 1.79 #>     # 6.19 - 4 * 1.79 <= max(data[[\"cyl\"]], na.rm = TRUE) #>  #>     \"disp\" %in% colnames(data) #>     is.double(data[[\"disp\"]]) #>     !any(is.na(data[[\"disp\"]]) | is.null(data[[\"disp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"disp\"]])) #>     min(data[[\"disp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 472 #>     # 71.1 <= min(data[[\"disp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 230.72 and the standard deviation is 123.94: #>     # max(data[[\"disp\"]], na.rm = TRUE) <= 230.72 + 4 * 123.94 #>     # 230.72 - 4 * 123.94 <= max(data[[\"disp\"]], na.rm = TRUE) #>  #>     \"hp\" %in% colnames(data) #>     is.double(data[[\"hp\"]]) #>     !any(is.na(data[[\"hp\"]]) | is.null(data[[\"hp\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"hp\"]])) #>     min(data[[\"hp\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 335 #>     # 52 <= min(data[[\"hp\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 146.69 and the standard deviation is 68.56: #>     # max(data[[\"hp\"]], na.rm = TRUE) <= 146.69 + 4 * 68.56 #>     # 146.69 - 4 * 68.56 <= max(data[[\"hp\"]], na.rm = TRUE) #>  #>     \"drat\" %in% colnames(data) #>     is.double(data[[\"drat\"]]) #>     !any(is.na(data[[\"drat\"]]) | is.null(data[[\"drat\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"drat\"]])) #>     min(data[[\"drat\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 4.93 #>     # 2.76 <= min(data[[\"drat\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.6 and the standard deviation is 0.53: #>     # max(data[[\"drat\"]], na.rm = TRUE) <= 3.6 + 4 * 0.53 #>     # 3.6 - 4 * 0.53 <= max(data[[\"drat\"]], na.rm = TRUE) #>  #>     \"wt\" %in% colnames(data) #>     is.double(data[[\"wt\"]]) #>     !any(is.na(data[[\"wt\"]]) | is.null(data[[\"wt\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"wt\"]])) #>     min(data[[\"wt\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 5.424 #>     # 1.513 <= min(data[[\"wt\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.22 and the standard deviation is 0.98: #>     # max(data[[\"wt\"]], na.rm = TRUE) <= 3.22 + 4 * 0.98 #>     # 3.22 - 4 * 0.98 <= max(data[[\"wt\"]], na.rm = TRUE) #>  #>     \"qsec\" %in% colnames(data) #>     is.double(data[[\"qsec\"]]) #>     !any(is.na(data[[\"qsec\"]]) | is.null(data[[\"qsec\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"qsec\"]])) #>     min(data[[\"qsec\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 22.9 #>     # 14.5 <= min(data[[\"qsec\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 17.85 and the standard deviation is 1.79: #>     # max(data[[\"qsec\"]], na.rm = TRUE) <= 17.85 + 4 * 1.79 #>     # 17.85 - 4 * 1.79 <= max(data[[\"qsec\"]], na.rm = TRUE) #>  #>     \"vs\" %in% colnames(data) #>     is.double(data[[\"vs\"]]) #>     !any(is.na(data[[\"vs\"]]) | is.null(data[[\"vs\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"vs\"]])) #>     min(data[[\"vs\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"vs\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.44 and the standard deviation is 0.5: #>     # max(data[[\"vs\"]], na.rm = TRUE) <= 0.44 + 4 * 0.5 #>     # 0.44 - 4 * 0.5 <= max(data[[\"vs\"]], na.rm = TRUE) #>  #>     \"am\" %in% colnames(data) #>     is.double(data[[\"am\"]]) #>     !any(is.na(data[[\"am\"]]) | is.null(data[[\"am\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"am\"]])) #>     min(data[[\"am\"]], na.rm = TRUE) >= 0 # all non-negative #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 1 #>     # 0 <= min(data[[\"am\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 0.41 and the standard deviation is 0.5: #>     # max(data[[\"am\"]], na.rm = TRUE) <= 0.41 + 4 * 0.5 #>     # 0.41 - 4 * 0.5 <= max(data[[\"am\"]], na.rm = TRUE) #>  #>     \"gear\" %in% colnames(data) #>     is.double(data[[\"gear\"]]) #>     !any(is.na(data[[\"gear\"]]) | is.null(data[[\"gear\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"gear\"]])) #>     min(data[[\"gear\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 5 #>     # 3 <= min(data[[\"gear\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 3.69 and the standard deviation is 0.74: #>     # max(data[[\"gear\"]], na.rm = TRUE) <= 3.69 + 4 * 0.74 #>     # 3.69 - 4 * 0.74 <= max(data[[\"gear\"]], na.rm = TRUE) #>  #>     \"carb\" %in% colnames(data) #>     is.double(data[[\"carb\"]]) #>     !any(is.na(data[[\"carb\"]]) | is.null(data[[\"carb\"]])) #>     # Duplicate values were detected so this assertion has been disabled: #>     # !any(duplicated(data[[\"carb\"]])) #>     min(data[[\"carb\"]], na.rm = TRUE) > 0 # all positive #>     # (Un)comment or modify the below range assertions if needed: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 8 #>     # 1 <= min(data[[\"carb\"]], na.rm = TRUE) #>     # (Un)comment or modify the below deviance assertions if needed. #>     # The mean is 2.81 and the standard deviation is 1.62: #>     # max(data[[\"carb\"]], na.rm = TRUE) <= 2.81 + 4 * 1.62 #>     # 2.81 - 4 * 1.62 <= max(data[[\"carb\"]], na.rm = TRUE) #>   }) #>   invisible(TRUE) #> }"}]
